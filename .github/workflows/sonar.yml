name: Master Sonar and Docker
on:
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  start-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Start EC2 Instance
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  build:
    runs-on: ubuntu-latest
    needs: start-ec2
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      
      - name: Build with Maven
        run: mvn clean install -DskipTests=true -f pom.xml
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=my-org
            -Dsonar.projectKey=my-Java-web-app
            -Dsonar.java.binaries=target/classes
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

 #     - name: Check SonarQube Quality Gate
  #      run: |
   #       SONAR_URL="${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=my-Java-web-app"
    #      STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL" | jq -r '.projectStatus.status')
     #     echo "SonarQube Quality Gate Status: $STATUS"
      #    if [ "$STATUS" != "OK" ]; then
       #     echo "Quality Gate failed. Failing the pipeline."
        #    exit 1
         # fi
        #env:
         # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          #SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t public.ecr.aws/f3q9z4v6/test:app_{{ github.run_number }} .
