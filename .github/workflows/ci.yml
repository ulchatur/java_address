name: Continuous Integration
on:
  push:
    branches:
      - master
  workflow_dispatch:
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  
jobs:
  start-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Check EC2 Instance State
        id: check-state
        run: |
          state=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[*].Instances[*].State.Name' --output text)
          echo "Current state: $state"
          if [ "$state" = "stopped" ]; then
            echo "start=true" >> $GITHUB_ENV
          else
            echo "start=false" >> $GITHUB_ENV
          fi
          
      - name: Start EC2 Instance
        if: env.start == 'true'
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for 45 seconds to ensure ec2 is up"
          sleep 45
          
  build:
    runs-on: ubuntu-latest
    needs: start-ec2
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      
      - name: Maven Build
        run: mvn clean install -DskipTests=true -f pom.xml
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=my-org
            -Dsonar.projectKey=my-Java-web-app
            -Dsonar.java.binaries=target/classes

      - name: Save Sonar scan Report
        run: |
          mkdir -p report
          SONAR_URL="${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=my-Java-web-app&metricKeys=coverage,bugs,vulnerabilities,code_smells"
          curl -s -u "${{ secrets.SONAR_TOKEN }}" "$SONAR_URL" -o report/sonar-report.json

      - name: Check SonarQube Quality Gate
        run: |
          SONAR_URL="${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=my-Java-web-app"
          STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "$SONAR_URL")
          echo "SonarQube Response: $STATUS"
          mkdir -p report
          echo "$STATUS" > report/sonar-gate.json
          SONAR_STATUS=$(echo "$STATUS" | jq -r '.projectStatus.status')
          echo "SonarQube Quality Gate Status: $SONAR_STATUS"

       #   if [ "$SONAR_STATUS" != "OK" ]; then
        #    echo "Quality Gate failed. Failing the pipeline."
         #   EXIT_CODE=1
        #  else
         #   EXIT_CODE=0
         # fi
          #  echo "EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV
 
      - name: Push Sonar Report to trivy Branch
        run: |
          git config --global user.name "ulchatur"
          git config --global user.email "ullasvardhan@gmail.com"
          git clone https://ulchatur:${{ secrets.PAT_TOKEN }}@github.com/ulchatur/java_address.git
          cd java_address
          git checkout trivy
          git status
          ls -al
          git rm -rf report/ || true
          rm -rf report
          mkdir -p report
          cp -r /home/runner/work/java_address/java_address/report/sonar-report.json report/
          cp -r /home/runner/work/java_address/java_address/report/sonar-gate.json report/
          git add -A
          git status
          git diff --staged --exit-code || git commit -m "Update SonarQube report"
          git remote set-url origin https://ulchatur:${{ secrets.PAT_TOKEN }}@github.com/ulchatur/java_address.git
          git pull origin trivy --rebase
          git push origin trivy

   #   - name: Fail Pipeline if Quality Gate Failed
    #    if: env.EXIT_CODE == '1'
      #  run: exit 1

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image for ECR
        run: |
          docker build -t 940482440184.dkr.ecr.us-east-1.amazonaws.com/test:latest .
          docker images
          
      - name: Run Trivy Scan on Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "940482440184.dkr.ecr.us-east-1.amazonaws.com/test:latest"
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
         # ignore-unfixed: true
          exit-code: 0
          vuln-type: 'os,library'
          scanners: 'vuln'   

      - name: Push the Docker Image
        run: |
          docker push 940482440184.dkr.ecr.us-east-1.amazonaws.com/test:latest

  stop-ec2:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: always()
    steps:
      - name: Stop EC2 Instance
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-stopped --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}  
